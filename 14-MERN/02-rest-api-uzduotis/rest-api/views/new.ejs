<%- include('partials/header'); -%>

<h1 class="title">Pridėti Naują Programuotoją</h1>
<div id="homepage">
    <div id="addDeveloper"></div>
</div>

<!-- Include Babel for JSX transformation -->
<script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>
<!-- Include React and ReactDOM -->
<script src="https://unpkg.com/react@15/dist/react.js"></script>
<script src="https://unpkg.com/react-dom@15/dist/react-dom.min.js"></script>

<script type="text/babel">
    class AddDev extends React.Component {
        constructor(props) {
            super(props);
            this.state = {
                error: null,
                success: null
            };
            this.handleAddDeveloper = this.handleAddDeveloper.bind(this);
        }

        handleAddDeveloper(e) {
            e.preventDefault();

            const vardas = this.vardas.value.trim();
            const tech = this.tech.value.split(',').map(t => t.trim()).filter(t => t);
            const laisvas = this.laisvas.checked;
            const ilguma = parseFloat(this.ilguma.value);
            const platuma = parseFloat(this.platuma.value);

            // Basic client-side validation
            if (!vardas || tech.length === 0 || isNaN(ilguma) || isNaN(platuma)) {
                this.setState({ error: 'Prašome užpildyti visus laukelius tinkamai.', success: null });
                return;
            }

            const dev = {
                vardas,
                tech,
                laisvas,
                coordinates: [ilguma, platuma]
            };

            fetch('/api/programuotojai', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(dev)
            })
            .then(response => {
                if (!response.ok) throw new Error('Nepavyko pridėti programuotojo');
                return response.json();
            })
            .then(data => {
                this.setState({ success: 'Programuotojas pridėtas sėkmingai!', error: null });
                // Optionally, reset the form fields
                this.form.reset();
                // Redirect to home page after a short delay
                setTimeout(() => {
                    window.location.href = '/';
                }, 1500);
            })
            .catch(err => {
                console.error('Error during POST:', err);
                this.setState({ error: err.message, success: null });
            });
        }

        render() {
            return (
                <div>
                    <form id="addDevForm" onSubmit={this.handleAddDeveloper} ref={(f) => this.form = f}>
                        <label htmlFor="vardas">Vardas:</label>
                        <input type="text" id="vardas" ref={(input) => this.vardas = input} required />

                        <label htmlFor="tech">Programinės kalbos (kableliais atskirtas sąrašas):</label>
                        <input type="text" id="tech" ref={(input) => this.tech = input} required />

                        <label htmlFor="laisvas">Laisvas:</label>
                        <input type="checkbox" id="laisvas" ref={(input) => this.laisvas = input} />

                        <label htmlFor="ilguma">Ilguma:</label>
                        <input type="number" step="0.0001" id="ilguma" ref={(input) => this.ilguma = input} required />

                        <label htmlFor="platuma">Platuma:</label>
                        <input type="number" step="0.0001" id="platuma" ref={(input) => this.platuma = input} required />

                        <input type="submit" value="Pridėti Programuotoją" />
                    </form>
                    {this.state.error && <div className="error-message">{this.state.error}</div>}
                    {this.state.success && <div className="success-message">{this.state.success}</div>}
                </div>
            );
        }
    }

    ReactDOM.render(<AddDev />, document.getElementById('addDeveloper'));
</script>

<%- include('partials/footer'); -%>